/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SecondChanceStakingTokenBankInterface extends ethers.utils.Interface {
  functions: {
    "BaseFee()": FunctionFragment;
    "LastId()": FunctionFragment;
    "PenaltyFee()": FunctionFragment;
    "PoolEndDate()": FunctionFragment;
    "StakeEntries(uint256)": FunctionFragment;
    "StakeEntryIds(address,uint256)": FunctionFragment;
    "WindowEnd()": FunctionFragment;
    "WindowStart()": FunctionFragment;
    "getStakeEntry(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBaseFee(uint256)": FunctionFragment;
    "setPenaltyFee(uint256)": FunctionFragment;
    "setPoolEndDate(uint256)": FunctionFragment;
    "setWindowEnd(uint256)": FunctionFragment;
    "setWindowStart(uint256)": FunctionFragment;
    "stake(address)": FunctionFragment;
    "stakeEntryIdsFullMapping(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unStake(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BaseFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "LastId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PenaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PoolEndDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "StakeEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "StakeEntryIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "WindowEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WindowStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolEndDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWindowEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWindowStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeEntryIdsFullMapping",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unStake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BaseFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LastId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PenaltyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PoolEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "StakeEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "StakeEntryIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WindowEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WindowStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWindowEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWindowStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeEntryIdsFullMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unStake", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(uint256,uint256,uint256,uint256,uint256,address,address,uint256,uint256)": EventFragment;
    "UnStaked(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnStaked"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StakedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    _id: BigNumber;
    _timestamp: BigNumber;
    _windowStartDate: BigNumber;
    _windowEndDate: BigNumber;
    _poolEndDate: BigNumber;
    _staker: string;
    _token: string;
    _amount: BigNumber;
    _decimals: BigNumber;
  }
>;

export type UnStakedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _id: BigNumber; _timestamp: BigNumber }
>;

export class SecondChanceStakingTokenBank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SecondChanceStakingTokenBankInterface;

  functions: {
    BaseFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    LastId(overrides?: CallOverrides): Promise<[BigNumber]>;

    PenaltyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    PoolEndDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    StakeEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, BigNumber, BigNumber] & {
        Staker: string;
        TokenAddress: string;
        Amount: BigNumber;
        State: number;
        EntryTime: BigNumber;
        PeriodFinish: BigNumber;
      }
    >;

    StakeEntryIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    WindowEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    WindowStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeEntry(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, number, BigNumber, BigNumber] & {
          Staker: string;
          TokenAddress: string;
          Amount: BigNumber;
          State: number;
          EntryTime: BigNumber;
          PeriodFinish: BigNumber;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseFee(
      baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPenaltyFee(
      penaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolEndDate(
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWindowEnd(
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWindowStart(
      startDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      stakingTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeEntryIdsFullMapping(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStake(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BaseFee(overrides?: CallOverrides): Promise<BigNumber>;

  LastId(overrides?: CallOverrides): Promise<BigNumber>;

  PenaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

  PoolEndDate(overrides?: CallOverrides): Promise<BigNumber>;

  StakeEntries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number, BigNumber, BigNumber] & {
      Staker: string;
      TokenAddress: string;
      Amount: BigNumber;
      State: number;
      EntryTime: BigNumber;
      PeriodFinish: BigNumber;
    }
  >;

  StakeEntryIds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  WindowEnd(overrides?: CallOverrides): Promise<BigNumber>;

  WindowStart(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeEntry(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number, BigNumber, BigNumber] & {
      Staker: string;
      TokenAddress: string;
      Amount: BigNumber;
      State: number;
      EntryTime: BigNumber;
      PeriodFinish: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseFee(
    baseFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPenaltyFee(
    penaltyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolEndDate(
    endDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWindowEnd(
    endDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWindowStart(
    startDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    stakingTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeEntryIdsFullMapping(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStake(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    LastId(overrides?: CallOverrides): Promise<BigNumber>;

    PenaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    PoolEndDate(overrides?: CallOverrides): Promise<BigNumber>;

    StakeEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, BigNumber, BigNumber] & {
        Staker: string;
        TokenAddress: string;
        Amount: BigNumber;
        State: number;
        EntryTime: BigNumber;
        PeriodFinish: BigNumber;
      }
    >;

    StakeEntryIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WindowEnd(overrides?: CallOverrides): Promise<BigNumber>;

    WindowStart(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeEntry(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, BigNumber, BigNumber] & {
        Staker: string;
        TokenAddress: string;
        Amount: BigNumber;
        State: number;
        EntryTime: BigNumber;
        PeriodFinish: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBaseFee(baseFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPenaltyFee(
      penaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolEndDate(
      endDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWindowEnd(
      endDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWindowStart(
      startDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      stakingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeEntryIdsFullMapping(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unStake(id: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Staked(uint256,uint256,uint256,uint256,uint256,address,address,uint256,uint256)"(
      _id?: BigNumberish | null,
      _timestamp?: BigNumberish | null,
      _windowStartDate?: null,
      _windowEndDate?: null,
      _poolEndDate?: null,
      _staker?: null,
      _token?: null,
      _amount?: null,
      _decimals?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ],
      {
        _id: BigNumber;
        _timestamp: BigNumber;
        _windowStartDate: BigNumber;
        _windowEndDate: BigNumber;
        _poolEndDate: BigNumber;
        _staker: string;
        _token: string;
        _amount: BigNumber;
        _decimals: BigNumber;
      }
    >;

    Staked(
      _id?: BigNumberish | null,
      _timestamp?: BigNumberish | null,
      _windowStartDate?: null,
      _windowEndDate?: null,
      _poolEndDate?: null,
      _staker?: null,
      _token?: null,
      _amount?: null,
      _decimals?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ],
      {
        _id: BigNumber;
        _timestamp: BigNumber;
        _windowStartDate: BigNumber;
        _windowEndDate: BigNumber;
        _poolEndDate: BigNumber;
        _staker: string;
        _token: string;
        _amount: BigNumber;
        _decimals: BigNumber;
      }
    >;

    "UnStaked(uint256,uint256)"(
      _id?: BigNumberish | null,
      _timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _id: BigNumber; _timestamp: BigNumber }
    >;

    UnStaked(
      _id?: BigNumberish | null,
      _timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _id: BigNumber; _timestamp: BigNumber }
    >;
  };

  estimateGas: {
    BaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    LastId(overrides?: CallOverrides): Promise<BigNumber>;

    PenaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    PoolEndDate(overrides?: CallOverrides): Promise<BigNumber>;

    StakeEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    StakeEntryIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WindowEnd(overrides?: CallOverrides): Promise<BigNumber>;

    WindowStart(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeEntry(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseFee(
      baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPenaltyFee(
      penaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolEndDate(
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWindowEnd(
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWindowStart(
      startDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      stakingTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeEntryIdsFullMapping(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStake(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BaseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LastId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PenaltyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PoolEndDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    StakeEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    StakeEntryIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WindowEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WindowStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeEntry(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseFee(
      baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPenaltyFee(
      penaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolEndDate(
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWindowEnd(
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWindowStart(
      startDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      stakingTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeEntryIdsFullMapping(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStake(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
